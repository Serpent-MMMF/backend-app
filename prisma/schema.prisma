// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  MENTOR
  MENTEE
}

enum SubscriptionStatus {
  FREE
  PREMIUM
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

model Province {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  City City[]
}

model City {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name       String
  provinceId String

  Province Province @relation(fields: [provinceId], references: [id])
  users    User[]
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name               String
  description        String
  role               Role
  email              String             @unique
  password           String
  cityId             String
  imageUrl           String?
  subscriptionStatus SubscriptionStatus

  City             City               @relation(fields: [cityId], references: [id])
  GroupSession     GroupSession[]
  BookGroupSession BookGroupSession[]

  OneOnOneMentor OneOnOne[]   @relation(name: "OneOnOneMentor")
  OneOnOneMentee OneOnOne[]   @relation(name: "OneOnOneMentee")
  Discussion     Discussion[]
  UserTag        UserTag[]
}

model Tag {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name    String
  UserTag UserTag[]
}

model UserTag {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  tagId  String

  User User @relation(fields: [userId], references: [id])
  Tag  Tag  @relation(fields: [tagId], references: [id])

  @@unique([userId, tagId])
}

model GroupSession {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name           String
  date           DateTime
  meetingUrl     String
  mentorId       String
  description    String
  maxParticipant Int

  Mentor           User               @relation(fields: [mentorId], references: [id])
  BookGroupSession BookGroupSession[]
  Discussion       Discussion[]
}

model BookGroupSession {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  menteeId  String
  sessionId String

  Mentee       User         @relation(fields: [menteeId], references: [id])
  GroupSession GroupSession @relation(fields: [sessionId], references: [id])
}

model OneOnOne {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  menteeId       String
  mentorId       String
  meetingUrl     String?
  review         String?
  rating         Int?
  message        String
  approvalStatus ApprovalStatus
  date           DateTime

  OneOnOneMentee User @relation(name: "OneOnOneMentee", fields: [menteeId], references: [id])
  OneOnOneMentor User @relation(name: "OneOnOneMentor", fields: [mentorId], references: [id])
}

model Discussion {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String
  sessionId String
  content   String

  User         User         @relation(fields: [userId], references: [id])
  GroupSession GroupSession @relation(fields: [sessionId], references: [id])
}
